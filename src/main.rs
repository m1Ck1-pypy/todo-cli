use anyhow::Result;
use chrono::{DateTime, Local, Utc};
use clap::Parser;
use dirs_next::data_dir;
use serde::{Deserialize, Serialize};
use std::{fs, path::PathBuf};
use uuid::Uuid;

#[derive(Debug, Deserialize, Serialize)]
struct TodoTask {
    id: Uuid,
    index: u32,
    title: String,
    is_complited: bool,
    created_at: DateTime<Utc>,
}

#[derive(Parser)]
#[command(name = "Todo CLI")]
#[command(about = "–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á", version = "0.1")]
struct Cli {
    #[command(subcommand)]
    command: Commands,
}

#[derive(clap::Subcommand)]
enum Commands {
    /// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    Add {
        #[arg(help = "–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")]
        title: String,
    },
    /// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
    List,
    /// –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
    Done {
        #[arg(help = "Index –∑–∞–¥–∞—á–∏")]
        index: u32,
    },
    /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    Remove {
        #[arg(help = "Index –∑–∞–¥–∞—á–∏")]
        index: u32,
    },
    /// –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª
    Clear,
}




fn main() -> Result<()> {
    let cli = Cli::parse();
    let path = data_file_path(); // –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ —Ñ–∞–π–ª —Ä—è–¥–æ–º —Å –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–º
    let mut tasks = load_tasks(&path)?;

    match &cli.command {
        Commands::Add { title } => {
            let new_task_index = tasks.iter().map(|t| t.index).max().unwrap_or(0) + 1;
            let now = Utc::now();
            tasks.push(TodoTask {
                id: Uuid::new_v4(),
                index: new_task_index,
                title: title.clone(),
                is_complited: false,
                created_at: now,
            });
            println!("‚úÖ –ó–∞–¥–∞—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞");
        }
        Commands::List => {
            if tasks.is_empty() {
                println!("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.");
            } else {
                println!("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:");
                for task in &tasks {
                    let status = if task.is_complited { "‚úÖ" } else { "‚ùå" };
                    let created_local: DateTime<Local> = task.created_at.into();
                    let created_str = created_local.format("%H:%M, %d.%m.%Y").to_string();

                    println!("{}. [{status}] {} - {created_str}", task.index, task.title);
                }
            }
        }
        Commands::Done { index } => {
            if let Some(task) = tasks.iter_mut().find(|t| t.index == *index) {
                task.is_complited = true;
                println!("üéâ –ó–∞–¥–∞—á–∞ '{}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", { &task.title });
            } else {
                anyhow::bail!("‚ùå –ó–∞–¥–∞—á–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {index} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            }
        }
        Commands::Remove { index } => {
            let len_before = tasks.len();
            tasks.retain(|t| t.index != *index);
            println!("{tasks:?}");
            if tasks.len() < len_before {
                println!("üóëÔ∏è –ó–∞–¥–∞—á–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {index} —É–¥–∞–ª–µ–Ω–∞.");

                tasks.sort_by_key(|t| t.index);
                for (index, task) in tasks.iter_mut().enumerate() {
                    task.index = (index + 1) as u32;
                }
                println!(
                    "üîÑ ID –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã: —Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞—á–∏ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã –æ—Ç 1 –¥–æ {}.",
                    tasks.len()
                );
            } else {
                anyhow::bail!("‚ùå –ó–∞–¥–∞—á–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {index} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            }
        }
        Commands::Clear => {
            tasks.clear();
            println!("üóëÔ∏è –§–∞–π–ª –æ—á–∏—â–µ–Ω.");
        }
    }

    save_tasks(&path, &tasks)?;
    Ok(())
}

fn load_tasks(path: &PathBuf) -> Result<Vec<TodoTask>, anyhow::Error> {
    let data = fs::read_to_string(path)?;

    let trimmed = data.trim();
    if trimmed.is_empty() {
        return Ok(vec![]);
    }

    let tasks = serde_json::from_str(trimmed)?;
    Ok(tasks)
}

fn save_tasks(path: &PathBuf, tasks: &[TodoTask]) -> Result<(), anyhow::Error> {
    let data = serde_json::to_string_pretty(tasks)?;
    fs::write(path, data)?; // –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ —Ñ–∞–π–ª —Ä—è–¥–æ–º —Å –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–º
    Ok(())
}

fn data_file_path() -> PathBuf {
    let mut path = data_dir().expect("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É –¥–∞–Ω–Ω—ã—Ö");
    path.push("todo-cli"); // –ü–∞–ø–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    fs::create_dir_all(&path).expect("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–∞–Ω–Ω—ã—Ö");
    path.push("todos.json"); // –§–∞–π–ª –∑–∞–¥–∞—á
    // C:\Users\{user}\AppData\Roaming\todo-cli\todos.json
    path
}
